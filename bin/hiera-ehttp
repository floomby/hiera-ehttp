#!/usr/bin/env ruby

require 'base64'
require 'openssl'
require 'optparse'
require 'ostruct'
require 'pp'
require 'time'
require 'date'
require 'json'

require_relative 'encrypt.rb'
require_relative 'hiera-ehttp-couch.rb'


class HieraEhttpKeys
    @banner = "Usage: hiera-ehttp keys [options]"
    def self.parse(args)
        options = OpenStruct.new
        
        # set the default cert name
        options.name = "CN=hiera-http/DC=neverland"
        
        opt_parser = OptionParser.new do |opts|
            opts.banner = @banner
            
            opts.on("-n", "--name <cert name>", "The name to use on the certificate") do |name| options.name = name end
            
        end
        
        opt_parser.parse!(args)
        options
    end
    
    def self.create(options)
        
        # create a key
        key = OpenSSL::PKey::RSA.new 2048
        
        # write the private key out in pem format
        open 'key.pem', 'w' do |io| io.write key.to_pem end
        
        # create a certificate to encrypt with
        name = OpenSSL::X509::Name.parse options.name
        
        cert = OpenSSL::X509::Certificate.new
        
        cert.version    = 2
        cert.serial     = 0
        # make the certificate good for a year
        cert.not_after  = Time.now
        cert.not_before = Time.now + (60*60*24*365)
        
        cert.public_key = key.public_key
        cert.subject    = name
        cert.issuer     = name
        
        # write the cert in pem format
        open 'cert.pem', 'w' do |io| io.write cert.to_pem end
        
    end
    
    def self.usage()
        puts @banner
    end
end

class HieraEhttpEncrypt
    @banner  = "Usage: hiera-ehttp encrypt [options]"
    
    def self.parse(args)
        options = OpenStruct.new
    
        options.strings = []
        options.jsons   = []
        
        opt_parser = OptionParser.new do |opts|
            opts.banner = @banner
            
            opts.on("-c", "--certfile <certficate>", "Certificate to encrypt with") { |cert| options.certificate = cert }
            opts.on("-s", "--string <value>", "String to encrypt") { |str| options.strings << str }
            #opts.on("-j", "--json <file>", "Encrypt all of the values in a json file") { |file| options.jsons << file }
            #opts.on("-y", "--yaml <file>", "Encrypt all of the values in a yaml file") do |file| options.yamls << file end
            
        end
        
        opt_parser.parse!(args)
        options
    end
    
    def self.encrypt(options)
        # read in the certificate and create the cipher object
        cert = OpenSSL::X509::Certificate.new (File.read options.certificate)
        cipher = OpenSSL::Cipher.new 'AES-128-CBC'
        
        # encrypt strings, jsons, and yamls
        strings options.strings, cert, cipher
        jsons   options.jsons,   cert, cipher
        #yamls   options.yamls,   cert, cipher
    end
    
    def self.strings(strings, cert, cipher)
        encs = []
        strings.each do |value|
            puts "\"#{value}\":" + (enc value, cert, cipher) + "\n"
        end
    end
    
    def self.enc(value, cert, cipher)
        ("\"ENC[PKCS7," + (Base64.encode64 (OpenSSL::PKCS7::encrypt [cert], value, cipher, OpenSSL::PKCS7::BINARY).to_der).delete("\n\r") + "]\"")
    end
    
    def self.jsons(jsons, cert, cipher)
        jsons.each do |json|
            doc = JSON.parse (File.read json)
            
            
            File.open('enc.' + json, 'w') { |file| file.write JSON.dump doc }
        end
    end
    
    def self.yamls(yamls, cert, cipher)
        puts "Encryption on yaml files unimplimented... Skiping"
    end
    
    def self.usage()
        puts @banner
    end
end




usage = "Usage: hiera-ehttp <action>"

action, *args = ARGV

if !action or action == 'help'
   puts usage
   exit
end

case action
when 'keys'
    options = HieraEhttpKeys.parse args
    HieraEhttpKeys.create options

when 'encrypt'
    options = HieraEhttpEncrypt.parse args
    HieraEhttpEncrypt.encrypt options

when 'couch'
    options = HieraEhttp::HieraEhttpCouch.parse args
    HieraEhttp::HieraEhttpCouch.go options

else
    puts 'invalid action (valid actions: keys, encrypt)'
end
